#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>

using namespace std;

// Define the state of the chessboard
struct State {
    vector<int> queens; // queens[i] is the row of the queen in column i
    int cost; // Number of pairs of queens that threaten each other

    State(const vector<int>& q) : queens(q), cost(0) {}

    // Calculate the cost (number of conflicts) for this state
    void calculateCost() {
        int n = queens.size();
        cost = 0;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (queens[i] == queens[j] || abs(queens[i] - queens[j]) == j - i) {
                    cost++;
                }
            }
        }
    }

    // Define a heuristic function for estimating remaining cost
    int heuristic() const {
        return cost;
    }
};

// Define a comparison function for the priority queue
struct CompareState {
    bool operator()(const State& s1, const State& s2) const {
        return (s1.cost + s1.heuristic()) > (s2.cost + s2.heuristic());
    }
};

// A* search algorithm
void AStarSearch() {
    const int n = 8; // Size of the chessboard
    vector<int> initialQueens(n, -1); // Initialize all queens to -1 (no queens placed)
    priority_queue<State, vector<State>, CompareState> openList;

    State initialState(initialQueens);
    initialState.calculateCost();
    openList.push(initialState);

    while (!openList.empty()) {
        State currentState = openList.top();
        openList.pop();

        if (currentState.cost == 0) {
            // Solution found
            cout << "Solution found:" << endl;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (currentState.queens[i] == j) {
                        cout << "Q ";
                    } else {
                        cout << ". ";
                    }
                }
                cout << endl;
            }
            return;
        }

        // Generate possible successor states
        for (int col = 0; col < n; col++) {
            for (int row = 0; row < n; row++) {
                if (currentState.queens[col] != row) {
                    vector<int> nextStateQueens = currentState.queens;
                    nextStateQueens[col] = row;

                    State nextState(nextStateQueens);
                    nextState.calculateCost();
                    openList.push(nextState);
                }
            }
        }
    }

    cout << "No solution found!" << endl;
}

int main() {
    AStarSearch();
    return 0;
}
